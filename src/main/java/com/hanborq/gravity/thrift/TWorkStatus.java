/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hanborq.gravity.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TWorkStatus implements org.apache.thrift.TBase<TWorkStatus, TWorkStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWorkStatus");

  private static final org.apache.thrift.protocol.TField WORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TWorkStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TWorkStatusTupleSchemeFactory());
  }

  public String workId; // required
  public String room; // required
  /**
   * 
   * @see TState
   */
  public TState state; // required
  public double progress; // required
  public long errors; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORK_ID((short)1, "workId"),
    ROOM((short)2, "room"),
    /**
     * 
     * @see TState
     */
    STATE((short)3, "state"),
    PROGRESS((short)4, "progress"),
    ERRORS((short)5, "errors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORK_ID
          return WORK_ID;
        case 2: // ROOM
          return ROOM;
        case 3: // STATE
          return STATE;
        case 4: // PROGRESS
          return PROGRESS;
        case 5: // ERRORS
          return ERRORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private static final int __ERRORS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORK_ID, new org.apache.thrift.meta_data.FieldMetaData("workId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TState.class)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWorkStatus.class, metaDataMap);
  }

  public TWorkStatus() {
  }

  public TWorkStatus(
    String workId,
    String room,
    TState state,
    double progress,
    long errors)
  {
    this();
    this.workId = workId;
    this.room = room;
    this.state = state;
    this.progress = progress;
    setProgressIsSet(true);
    this.errors = errors;
    setErrorsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWorkStatus(TWorkStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWorkId()) {
      this.workId = other.workId;
    }
    if (other.isSetRoom()) {
      this.room = other.room;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.progress = other.progress;
    this.errors = other.errors;
  }

  public TWorkStatus deepCopy() {
    return new TWorkStatus(this);
  }

  @Override
  public void clear() {
    this.workId = null;
    this.room = null;
    this.state = null;
    setProgressIsSet(false);
    this.progress = 0.0;
    setErrorsIsSet(false);
    this.errors = 0;
  }

  public String getWorkId() {
    return this.workId;
  }

  public TWorkStatus setWorkId(String workId) {
    this.workId = workId;
    return this;
  }

  public void unsetWorkId() {
    this.workId = null;
  }

  /** Returns true if field workId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkId() {
    return this.workId != null;
  }

  public void setWorkIdIsSet(boolean value) {
    if (!value) {
      this.workId = null;
    }
  }

  public String getRoom() {
    return this.room;
  }

  public TWorkStatus setRoom(String room) {
    this.room = room;
    return this;
  }

  public void unsetRoom() {
    this.room = null;
  }

  /** Returns true if field room is set (has been assigned a value) and false otherwise */
  public boolean isSetRoom() {
    return this.room != null;
  }

  public void setRoomIsSet(boolean value) {
    if (!value) {
      this.room = null;
    }
  }

  /**
   * 
   * @see TState
   */
  public TState getState() {
    return this.state;
  }

  /**
   * 
   * @see TState
   */
  public TWorkStatus setState(TState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public double getProgress() {
    return this.progress;
  }

  public TWorkStatus setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public long getErrors() {
    return this.errors;
  }

  public TWorkStatus setErrors(long errors) {
    this.errors = errors;
    setErrorsIsSet(true);
    return this;
  }

  public void unsetErrors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORS_ISSET_ID);
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORS_ISSET_ID);
  }

  public void setErrorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WORK_ID:
      if (value == null) {
        unsetWorkId();
      } else {
        setWorkId((String)value);
      }
      break;

    case ROOM:
      if (value == null) {
        unsetRoom();
      } else {
        setRoom((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TState)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WORK_ID:
      return getWorkId();

    case ROOM:
      return getRoom();

    case STATE:
      return getState();

    case PROGRESS:
      return Double.valueOf(getProgress());

    case ERRORS:
      return Long.valueOf(getErrors());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WORK_ID:
      return isSetWorkId();
    case ROOM:
      return isSetRoom();
    case STATE:
      return isSetState();
    case PROGRESS:
      return isSetProgress();
    case ERRORS:
      return isSetErrors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TWorkStatus)
      return this.equals((TWorkStatus)that);
    return false;
  }

  public boolean equals(TWorkStatus that) {
    if (that == null)
      return false;

    boolean this_present_workId = true && this.isSetWorkId();
    boolean that_present_workId = true && that.isSetWorkId();
    if (this_present_workId || that_present_workId) {
      if (!(this_present_workId && that_present_workId))
        return false;
      if (!this.workId.equals(that.workId))
        return false;
    }

    boolean this_present_room = true && this.isSetRoom();
    boolean that_present_room = true && that.isSetRoom();
    if (this_present_room || that_present_room) {
      if (!(this_present_room && that_present_room))
        return false;
      if (!this.room.equals(that.room))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_errors = true;
    boolean that_present_errors = true;
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (this.errors != that.errors)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TWorkStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TWorkStatus typedOther = (TWorkStatus)other;

    lastComparison = Boolean.valueOf(isSetWorkId()).compareTo(typedOther.isSetWorkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workId, typedOther.workId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoom()).compareTo(typedOther.isSetRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, typedOther.room);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(typedOther.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, typedOther.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrors()).compareTo(typedOther.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, typedOther.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TWorkStatus(");
    boolean first = true;

    sb.append("workId:");
    if (this.workId == null) {
      sb.append("null");
    } else {
      sb.append(this.workId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("room:");
    if (this.room == null) {
      sb.append("null");
    } else {
      sb.append(this.room);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errors:");
    sb.append(this.errors);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (workId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'workId' was not present! Struct: " + toString());
    }
    if (room == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'room' was not present! Struct: " + toString());
    }
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'progress' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'errors' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWorkStatusStandardSchemeFactory implements SchemeFactory {
    public TWorkStatusStandardScheme getScheme() {
      return new TWorkStatusStandardScheme();
    }
  }

  private static class TWorkStatusStandardScheme extends StandardScheme<TWorkStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWorkStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workId = iprot.readString();
              struct.setWorkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.room = iprot.readString();
              struct.setRoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = TState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.progress = iprot.readDouble();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.errors = iprot.readI64();
              struct.setErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetProgress()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'progress' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetErrors()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errors' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWorkStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.workId != null) {
        oprot.writeFieldBegin(WORK_ID_FIELD_DESC);
        oprot.writeString(struct.workId);
        oprot.writeFieldEnd();
      }
      if (struct.room != null) {
        oprot.writeFieldBegin(ROOM_FIELD_DESC);
        oprot.writeString(struct.room);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.progress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERRORS_FIELD_DESC);
      oprot.writeI64(struct.errors);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWorkStatusTupleSchemeFactory implements SchemeFactory {
    public TWorkStatusTupleScheme getScheme() {
      return new TWorkStatusTupleScheme();
    }
  }

  private static class TWorkStatusTupleScheme extends TupleScheme<TWorkStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWorkStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.workId);
      oprot.writeString(struct.room);
      oprot.writeI32(struct.state.getValue());
      oprot.writeDouble(struct.progress);
      oprot.writeI64(struct.errors);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWorkStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.workId = iprot.readString();
      struct.setWorkIdIsSet(true);
      struct.room = iprot.readString();
      struct.setRoomIsSet(true);
      struct.state = TState.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
      struct.progress = iprot.readDouble();
      struct.setProgressIsSet(true);
      struct.errors = iprot.readI64();
      struct.setErrorsIsSet(true);
    }
  }

}

