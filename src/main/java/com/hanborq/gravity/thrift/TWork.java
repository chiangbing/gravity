/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hanborq.gravity.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TWork implements org.apache.thrift.TBase<TWork, TWork._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWork");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLAZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clazz", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("clientHost", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField METRICS_SERVER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("metricsServerHost", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField METRICS_SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("metricsServerPort", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_SERVER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("statusServerHost", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusServerPort", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TWorkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TWorkTupleSchemeFactory());
  }

  public String id; // required
  public String clazz; // required
  public Map<String,String> params; // required
  public String clientHost; // required
  public String metricsServerHost; // required
  public int metricsServerPort; // required
  public String statusServerHost; // required
  public int statusServerPort; // required
  public String description; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CLAZZ((short)2, "clazz"),
    PARAMS((short)3, "params"),
    CLIENT_HOST((short)4, "clientHost"),
    METRICS_SERVER_HOST((short)5, "metricsServerHost"),
    METRICS_SERVER_PORT((short)6, "metricsServerPort"),
    STATUS_SERVER_HOST((short)7, "statusServerHost"),
    STATUS_SERVER_PORT((short)8, "statusServerPort"),
    DESCRIPTION((short)11, "description");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLAZZ
          return CLAZZ;
        case 3: // PARAMS
          return PARAMS;
        case 4: // CLIENT_HOST
          return CLIENT_HOST;
        case 5: // METRICS_SERVER_HOST
          return METRICS_SERVER_HOST;
        case 6: // METRICS_SERVER_PORT
          return METRICS_SERVER_PORT;
        case 7: // STATUS_SERVER_HOST
          return STATUS_SERVER_HOST;
        case 8: // STATUS_SERVER_PORT
          return STATUS_SERVER_PORT;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __METRICSSERVERPORT_ISSET_ID = 0;
  private static final int __STATUSSERVERPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DESCRIPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.CLAZZ, new org.apache.thrift.meta_data.FieldMetaData("clazz", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CLIENT_HOST, new org.apache.thrift.meta_data.FieldMetaData("clientHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS_SERVER_HOST, new org.apache.thrift.meta_data.FieldMetaData("metricsServerHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRICS_SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("metricsServerPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_SERVER_HOST, new org.apache.thrift.meta_data.FieldMetaData("statusServerHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("statusServerPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWork.class, metaDataMap);
  }

  public TWork() {
  }

  public TWork(
    String id,
    String clazz,
    Map<String,String> params,
    String clientHost,
    String metricsServerHost,
    int metricsServerPort,
    String statusServerHost,
    int statusServerPort)
  {
    this();
    this.id = id;
    this.clazz = clazz;
    this.params = params;
    this.clientHost = clientHost;
    this.metricsServerHost = metricsServerHost;
    this.metricsServerPort = metricsServerPort;
    setMetricsServerPortIsSet(true);
    this.statusServerHost = statusServerHost;
    this.statusServerPort = statusServerPort;
    setStatusServerPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWork(TWork other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetClazz()) {
      this.clazz = other.clazz;
    }
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
    if (other.isSetClientHost()) {
      this.clientHost = other.clientHost;
    }
    if (other.isSetMetricsServerHost()) {
      this.metricsServerHost = other.metricsServerHost;
    }
    this.metricsServerPort = other.metricsServerPort;
    if (other.isSetStatusServerHost()) {
      this.statusServerHost = other.statusServerHost;
    }
    this.statusServerPort = other.statusServerPort;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
  }

  public TWork deepCopy() {
    return new TWork(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.clazz = null;
    this.params = null;
    this.clientHost = null;
    this.metricsServerHost = null;
    setMetricsServerPortIsSet(false);
    this.metricsServerPort = 0;
    this.statusServerHost = null;
    setStatusServerPortIsSet(false);
    this.statusServerPort = 0;
    this.description = null;
  }

  public String getId() {
    return this.id;
  }

  public TWork setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getClazz() {
    return this.clazz;
  }

  public TWork setClazz(String clazz) {
    this.clazz = clazz;
    return this;
  }

  public void unsetClazz() {
    this.clazz = null;
  }

  /** Returns true if field clazz is set (has been assigned a value) and false otherwise */
  public boolean isSetClazz() {
    return this.clazz != null;
  }

  public void setClazzIsSet(boolean value) {
    if (!value) {
      this.clazz = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  public Map<String,String> getParams() {
    return this.params;
  }

  public TWork setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public String getClientHost() {
    return this.clientHost;
  }

  public TWork setClientHost(String clientHost) {
    this.clientHost = clientHost;
    return this;
  }

  public void unsetClientHost() {
    this.clientHost = null;
  }

  /** Returns true if field clientHost is set (has been assigned a value) and false otherwise */
  public boolean isSetClientHost() {
    return this.clientHost != null;
  }

  public void setClientHostIsSet(boolean value) {
    if (!value) {
      this.clientHost = null;
    }
  }

  public String getMetricsServerHost() {
    return this.metricsServerHost;
  }

  public TWork setMetricsServerHost(String metricsServerHost) {
    this.metricsServerHost = metricsServerHost;
    return this;
  }

  public void unsetMetricsServerHost() {
    this.metricsServerHost = null;
  }

  /** Returns true if field metricsServerHost is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricsServerHost() {
    return this.metricsServerHost != null;
  }

  public void setMetricsServerHostIsSet(boolean value) {
    if (!value) {
      this.metricsServerHost = null;
    }
  }

  public int getMetricsServerPort() {
    return this.metricsServerPort;
  }

  public TWork setMetricsServerPort(int metricsServerPort) {
    this.metricsServerPort = metricsServerPort;
    setMetricsServerPortIsSet(true);
    return this;
  }

  public void unsetMetricsServerPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METRICSSERVERPORT_ISSET_ID);
  }

  /** Returns true if field metricsServerPort is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricsServerPort() {
    return EncodingUtils.testBit(__isset_bitfield, __METRICSSERVERPORT_ISSET_ID);
  }

  public void setMetricsServerPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METRICSSERVERPORT_ISSET_ID, value);
  }

  public String getStatusServerHost() {
    return this.statusServerHost;
  }

  public TWork setStatusServerHost(String statusServerHost) {
    this.statusServerHost = statusServerHost;
    return this;
  }

  public void unsetStatusServerHost() {
    this.statusServerHost = null;
  }

  /** Returns true if field statusServerHost is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusServerHost() {
    return this.statusServerHost != null;
  }

  public void setStatusServerHostIsSet(boolean value) {
    if (!value) {
      this.statusServerHost = null;
    }
  }

  public int getStatusServerPort() {
    return this.statusServerPort;
  }

  public TWork setStatusServerPort(int statusServerPort) {
    this.statusServerPort = statusServerPort;
    setStatusServerPortIsSet(true);
    return this;
  }

  public void unsetStatusServerPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSSERVERPORT_ISSET_ID);
  }

  /** Returns true if field statusServerPort is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusServerPort() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSSERVERPORT_ISSET_ID);
  }

  public void setStatusServerPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSSERVERPORT_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public TWork setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CLAZZ:
      if (value == null) {
        unsetClazz();
      } else {
        setClazz((String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    case CLIENT_HOST:
      if (value == null) {
        unsetClientHost();
      } else {
        setClientHost((String)value);
      }
      break;

    case METRICS_SERVER_HOST:
      if (value == null) {
        unsetMetricsServerHost();
      } else {
        setMetricsServerHost((String)value);
      }
      break;

    case METRICS_SERVER_PORT:
      if (value == null) {
        unsetMetricsServerPort();
      } else {
        setMetricsServerPort((Integer)value);
      }
      break;

    case STATUS_SERVER_HOST:
      if (value == null) {
        unsetStatusServerHost();
      } else {
        setStatusServerHost((String)value);
      }
      break;

    case STATUS_SERVER_PORT:
      if (value == null) {
        unsetStatusServerPort();
      } else {
        setStatusServerPort((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CLAZZ:
      return getClazz();

    case PARAMS:
      return getParams();

    case CLIENT_HOST:
      return getClientHost();

    case METRICS_SERVER_HOST:
      return getMetricsServerHost();

    case METRICS_SERVER_PORT:
      return Integer.valueOf(getMetricsServerPort());

    case STATUS_SERVER_HOST:
      return getStatusServerHost();

    case STATUS_SERVER_PORT:
      return Integer.valueOf(getStatusServerPort());

    case DESCRIPTION:
      return getDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLAZZ:
      return isSetClazz();
    case PARAMS:
      return isSetParams();
    case CLIENT_HOST:
      return isSetClientHost();
    case METRICS_SERVER_HOST:
      return isSetMetricsServerHost();
    case METRICS_SERVER_PORT:
      return isSetMetricsServerPort();
    case STATUS_SERVER_HOST:
      return isSetStatusServerHost();
    case STATUS_SERVER_PORT:
      return isSetStatusServerPort();
    case DESCRIPTION:
      return isSetDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TWork)
      return this.equals((TWork)that);
    return false;
  }

  public boolean equals(TWork that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_clazz = true && this.isSetClazz();
    boolean that_present_clazz = true && that.isSetClazz();
    if (this_present_clazz || that_present_clazz) {
      if (!(this_present_clazz && that_present_clazz))
        return false;
      if (!this.clazz.equals(that.clazz))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_clientHost = true && this.isSetClientHost();
    boolean that_present_clientHost = true && that.isSetClientHost();
    if (this_present_clientHost || that_present_clientHost) {
      if (!(this_present_clientHost && that_present_clientHost))
        return false;
      if (!this.clientHost.equals(that.clientHost))
        return false;
    }

    boolean this_present_metricsServerHost = true && this.isSetMetricsServerHost();
    boolean that_present_metricsServerHost = true && that.isSetMetricsServerHost();
    if (this_present_metricsServerHost || that_present_metricsServerHost) {
      if (!(this_present_metricsServerHost && that_present_metricsServerHost))
        return false;
      if (!this.metricsServerHost.equals(that.metricsServerHost))
        return false;
    }

    boolean this_present_metricsServerPort = true;
    boolean that_present_metricsServerPort = true;
    if (this_present_metricsServerPort || that_present_metricsServerPort) {
      if (!(this_present_metricsServerPort && that_present_metricsServerPort))
        return false;
      if (this.metricsServerPort != that.metricsServerPort)
        return false;
    }

    boolean this_present_statusServerHost = true && this.isSetStatusServerHost();
    boolean that_present_statusServerHost = true && that.isSetStatusServerHost();
    if (this_present_statusServerHost || that_present_statusServerHost) {
      if (!(this_present_statusServerHost && that_present_statusServerHost))
        return false;
      if (!this.statusServerHost.equals(that.statusServerHost))
        return false;
    }

    boolean this_present_statusServerPort = true;
    boolean that_present_statusServerPort = true;
    if (this_present_statusServerPort || that_present_statusServerPort) {
      if (!(this_present_statusServerPort && that_present_statusServerPort))
        return false;
      if (this.statusServerPort != that.statusServerPort)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TWork other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TWork typedOther = (TWork)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClazz()).compareTo(typedOther.isSetClazz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClazz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clazz, typedOther.clazz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientHost()).compareTo(typedOther.isSetClientHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientHost, typedOther.clientHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricsServerHost()).compareTo(typedOther.isSetMetricsServerHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricsServerHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricsServerHost, typedOther.metricsServerHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricsServerPort()).compareTo(typedOther.isSetMetricsServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricsServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricsServerPort, typedOther.metricsServerPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusServerHost()).compareTo(typedOther.isSetStatusServerHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusServerHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusServerHost, typedOther.statusServerHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusServerPort()).compareTo(typedOther.isSetStatusServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusServerPort, typedOther.statusServerPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TWork(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clazz:");
    if (this.clazz == null) {
      sb.append("null");
    } else {
      sb.append(this.clazz);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientHost:");
    if (this.clientHost == null) {
      sb.append("null");
    } else {
      sb.append(this.clientHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricsServerHost:");
    if (this.metricsServerHost == null) {
      sb.append("null");
    } else {
      sb.append(this.metricsServerHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricsServerPort:");
    sb.append(this.metricsServerPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusServerHost:");
    if (this.statusServerHost == null) {
      sb.append("null");
    } else {
      sb.append(this.statusServerHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusServerPort:");
    sb.append(this.statusServerPort);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (clazz == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clazz' was not present! Struct: " + toString());
    }
    if (params == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'params' was not present! Struct: " + toString());
    }
    if (clientHost == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientHost' was not present! Struct: " + toString());
    }
    if (metricsServerHost == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metricsServerHost' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'metricsServerPort' because it's a primitive and you chose the non-beans generator.
    if (statusServerHost == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusServerHost' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'statusServerPort' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWorkStandardSchemeFactory implements SchemeFactory {
    public TWorkStandardScheme getScheme() {
      return new TWorkStandardScheme();
    }
  }

  private static class TWorkStandardScheme extends StandardScheme<TWork> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWork struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLAZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clazz = iprot.readString();
              struct.setClazzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.params.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientHost = iprot.readString();
              struct.setClientHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METRICS_SERVER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metricsServerHost = iprot.readString();
              struct.setMetricsServerHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // METRICS_SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metricsServerPort = iprot.readI32();
              struct.setMetricsServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS_SERVER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusServerHost = iprot.readString();
              struct.setStatusServerHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS_SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusServerPort = iprot.readI32();
              struct.setStatusServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMetricsServerPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metricsServerPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatusServerPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusServerPort' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWork struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clazz != null) {
        oprot.writeFieldBegin(CLAZZ_FIELD_DESC);
        oprot.writeString(struct.clazz);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (Map.Entry<String, String> _iter4 : struct.params.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.clientHost != null) {
        oprot.writeFieldBegin(CLIENT_HOST_FIELD_DESC);
        oprot.writeString(struct.clientHost);
        oprot.writeFieldEnd();
      }
      if (struct.metricsServerHost != null) {
        oprot.writeFieldBegin(METRICS_SERVER_HOST_FIELD_DESC);
        oprot.writeString(struct.metricsServerHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METRICS_SERVER_PORT_FIELD_DESC);
      oprot.writeI32(struct.metricsServerPort);
      oprot.writeFieldEnd();
      if (struct.statusServerHost != null) {
        oprot.writeFieldBegin(STATUS_SERVER_HOST_FIELD_DESC);
        oprot.writeString(struct.statusServerHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_SERVER_PORT_FIELD_DESC);
      oprot.writeI32(struct.statusServerPort);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWorkTupleSchemeFactory implements SchemeFactory {
    public TWorkTupleScheme getScheme() {
      return new TWorkTupleScheme();
    }
  }

  private static class TWorkTupleScheme extends TupleScheme<TWork> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWork struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.clazz);
      {
        oprot.writeI32(struct.params.size());
        for (Map.Entry<String, String> _iter5 : struct.params.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
      oprot.writeString(struct.clientHost);
      oprot.writeString(struct.metricsServerHost);
      oprot.writeI32(struct.metricsServerPort);
      oprot.writeString(struct.statusServerHost);
      oprot.writeI32(struct.statusServerPort);
      BitSet optionals = new BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWork struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.clazz = iprot.readString();
      struct.setClazzIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.params = new HashMap<String,String>(2*_map6.size);
        for (int _i7 = 0; _i7 < _map6.size; ++_i7)
        {
          String _key8; // required
          String _val9; // required
          _key8 = iprot.readString();
          _val9 = iprot.readString();
          struct.params.put(_key8, _val9);
        }
      }
      struct.setParamsIsSet(true);
      struct.clientHost = iprot.readString();
      struct.setClientHostIsSet(true);
      struct.metricsServerHost = iprot.readString();
      struct.setMetricsServerHostIsSet(true);
      struct.metricsServerPort = iprot.readI32();
      struct.setMetricsServerPortIsSet(true);
      struct.statusServerHost = iprot.readString();
      struct.setStatusServerHostIsSet(true);
      struct.statusServerPort = iprot.readI32();
      struct.setStatusServerPortIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }
  }

}

