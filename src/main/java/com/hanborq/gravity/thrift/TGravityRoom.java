/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hanborq.gravity.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGravityRoom {

  public interface Iface {

    public void startWork(TWork work) throws org.apache.thrift.TException;

    public void stopWork(String work_id) throws org.apache.thrift.TException;

    public void pauseWork(String work_id) throws org.apache.thrift.TException;

    public void resumeWork(String work_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startWork(TWork work, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startWork_call> resultHandler) throws org.apache.thrift.TException;

    public void stopWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopWork_call> resultHandler) throws org.apache.thrift.TException;

    public void pauseWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pauseWork_call> resultHandler) throws org.apache.thrift.TException;

    public void resumeWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.resumeWork_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void startWork(TWork work) throws org.apache.thrift.TException
    {
      send_startWork(work);
      recv_startWork();
    }

    public void send_startWork(TWork work) throws org.apache.thrift.TException
    {
      startWork_args args = new startWork_args();
      args.setWork(work);
      sendBase("startWork", args);
    }

    public void recv_startWork() throws org.apache.thrift.TException
    {
      startWork_result result = new startWork_result();
      receiveBase(result, "startWork");
      return;
    }

    public void stopWork(String work_id) throws org.apache.thrift.TException
    {
      send_stopWork(work_id);
      recv_stopWork();
    }

    public void send_stopWork(String work_id) throws org.apache.thrift.TException
    {
      stopWork_args args = new stopWork_args();
      args.setWork_id(work_id);
      sendBase("stopWork", args);
    }

    public void recv_stopWork() throws org.apache.thrift.TException
    {
      stopWork_result result = new stopWork_result();
      receiveBase(result, "stopWork");
      return;
    }

    public void pauseWork(String work_id) throws org.apache.thrift.TException
    {
      send_pauseWork(work_id);
      recv_pauseWork();
    }

    public void send_pauseWork(String work_id) throws org.apache.thrift.TException
    {
      pauseWork_args args = new pauseWork_args();
      args.setWork_id(work_id);
      sendBase("pauseWork", args);
    }

    public void recv_pauseWork() throws org.apache.thrift.TException
    {
      pauseWork_result result = new pauseWork_result();
      receiveBase(result, "pauseWork");
      return;
    }

    public void resumeWork(String work_id) throws org.apache.thrift.TException
    {
      send_resumeWork(work_id);
      recv_resumeWork();
    }

    public void send_resumeWork(String work_id) throws org.apache.thrift.TException
    {
      resumeWork_args args = new resumeWork_args();
      args.setWork_id(work_id);
      sendBase("resumeWork", args);
    }

    public void recv_resumeWork() throws org.apache.thrift.TException
    {
      resumeWork_result result = new resumeWork_result();
      receiveBase(result, "resumeWork");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startWork(TWork work, org.apache.thrift.async.AsyncMethodCallback<startWork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startWork_call method_call = new startWork_call(work, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startWork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TWork work;
      public startWork_call(TWork work, org.apache.thrift.async.AsyncMethodCallback<startWork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.work = work;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startWork_args args = new startWork_args();
        args.setWork(work);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startWork();
      }
    }

    public void stopWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<stopWork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopWork_call method_call = new stopWork_call(work_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopWork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String work_id;
      public stopWork_call(String work_id, org.apache.thrift.async.AsyncMethodCallback<stopWork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.work_id = work_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopWork_args args = new stopWork_args();
        args.setWork_id(work_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stopWork();
      }
    }

    public void pauseWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<pauseWork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pauseWork_call method_call = new pauseWork_call(work_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pauseWork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String work_id;
      public pauseWork_call(String work_id, org.apache.thrift.async.AsyncMethodCallback<pauseWork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.work_id = work_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pauseWork_args args = new pauseWork_args();
        args.setWork_id(work_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_pauseWork();
      }
    }

    public void resumeWork(String work_id, org.apache.thrift.async.AsyncMethodCallback<resumeWork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeWork_call method_call = new resumeWork_call(work_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeWork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String work_id;
      public resumeWork_call(String work_id, org.apache.thrift.async.AsyncMethodCallback<resumeWork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.work_id = work_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeWork_args args = new resumeWork_args();
        args.setWork_id(work_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resumeWork();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startWork", new startWork());
      processMap.put("stopWork", new stopWork());
      processMap.put("pauseWork", new pauseWork());
      processMap.put("resumeWork", new resumeWork());
      return processMap;
    }

    public static class startWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startWork_args> {
      public startWork() {
        super("startWork");
      }

      public startWork_args getEmptyArgsInstance() {
        return new startWork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startWork_result getResult(I iface, startWork_args args) throws org.apache.thrift.TException {
        startWork_result result = new startWork_result();
        iface.startWork(args.work);
        return result;
      }
    }

    public static class stopWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopWork_args> {
      public stopWork() {
        super("stopWork");
      }

      public stopWork_args getEmptyArgsInstance() {
        return new stopWork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopWork_result getResult(I iface, stopWork_args args) throws org.apache.thrift.TException {
        stopWork_result result = new stopWork_result();
        iface.stopWork(args.work_id);
        return result;
      }
    }

    public static class pauseWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseWork_args> {
      public pauseWork() {
        super("pauseWork");
      }

      public pauseWork_args getEmptyArgsInstance() {
        return new pauseWork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pauseWork_result getResult(I iface, pauseWork_args args) throws org.apache.thrift.TException {
        pauseWork_result result = new pauseWork_result();
        iface.pauseWork(args.work_id);
        return result;
      }
    }

    public static class resumeWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeWork_args> {
      public resumeWork() {
        super("resumeWork");
      }

      public resumeWork_args getEmptyArgsInstance() {
        return new resumeWork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resumeWork_result getResult(I iface, resumeWork_args args) throws org.apache.thrift.TException {
        resumeWork_result result = new resumeWork_result();
        iface.resumeWork(args.work_id);
        return result;
      }
    }

  }

  public static class startWork_args implements org.apache.thrift.TBase<startWork_args, startWork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startWork_args");

    private static final org.apache.thrift.protocol.TField WORK_FIELD_DESC = new org.apache.thrift.protocol.TField("work", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startWork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startWork_argsTupleSchemeFactory());
    }

    public TWork work; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK((short)1, "work");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK
            return WORK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK, new org.apache.thrift.meta_data.FieldMetaData("work", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWork.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startWork_args.class, metaDataMap);
    }

    public startWork_args() {
    }

    public startWork_args(
      TWork work)
    {
      this();
      this.work = work;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startWork_args(startWork_args other) {
      if (other.isSetWork()) {
        this.work = new TWork(other.work);
      }
    }

    public startWork_args deepCopy() {
      return new startWork_args(this);
    }

    @Override
    public void clear() {
      this.work = null;
    }

    public TWork getWork() {
      return this.work;
    }

    public startWork_args setWork(TWork work) {
      this.work = work;
      return this;
    }

    public void unsetWork() {
      this.work = null;
    }

    /** Returns true if field work is set (has been assigned a value) and false otherwise */
    public boolean isSetWork() {
      return this.work != null;
    }

    public void setWorkIsSet(boolean value) {
      if (!value) {
        this.work = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK:
        if (value == null) {
          unsetWork();
        } else {
          setWork((TWork)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK:
        return getWork();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK:
        return isSetWork();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startWork_args)
        return this.equals((startWork_args)that);
      return false;
    }

    public boolean equals(startWork_args that) {
      if (that == null)
        return false;

      boolean this_present_work = true && this.isSetWork();
      boolean that_present_work = true && that.isSetWork();
      if (this_present_work || that_present_work) {
        if (!(this_present_work && that_present_work))
          return false;
        if (!this.work.equals(that.work))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startWork_args typedOther = (startWork_args)other;

      lastComparison = Boolean.valueOf(isSetWork()).compareTo(typedOther.isSetWork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work, typedOther.work);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startWork_args(");
      boolean first = true;

      sb.append("work:");
      if (this.work == null) {
        sb.append("null");
      } else {
        sb.append(this.work);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (work != null) {
        work.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startWork_argsStandardSchemeFactory implements SchemeFactory {
      public startWork_argsStandardScheme getScheme() {
        return new startWork_argsStandardScheme();
      }
    }

    private static class startWork_argsStandardScheme extends StandardScheme<startWork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.work = new TWork();
                struct.work.read(iprot);
                struct.setWorkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startWork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.work != null) {
          oprot.writeFieldBegin(WORK_FIELD_DESC);
          struct.work.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startWork_argsTupleSchemeFactory implements SchemeFactory {
      public startWork_argsTupleScheme getScheme() {
        return new startWork_argsTupleScheme();
      }
    }

    private static class startWork_argsTupleScheme extends TupleScheme<startWork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWork()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWork()) {
          struct.work.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.work = new TWork();
          struct.work.read(iprot);
          struct.setWorkIsSet(true);
        }
      }
    }

  }

  public static class startWork_result implements org.apache.thrift.TBase<startWork_result, startWork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startWork_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startWork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startWork_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startWork_result.class, metaDataMap);
    }

    public startWork_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startWork_result(startWork_result other) {
    }

    public startWork_result deepCopy() {
      return new startWork_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startWork_result)
        return this.equals((startWork_result)that);
      return false;
    }

    public boolean equals(startWork_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startWork_result typedOther = (startWork_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startWork_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startWork_resultStandardSchemeFactory implements SchemeFactory {
      public startWork_resultStandardScheme getScheme() {
        return new startWork_resultStandardScheme();
      }
    }

    private static class startWork_resultStandardScheme extends StandardScheme<startWork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startWork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startWork_resultTupleSchemeFactory implements SchemeFactory {
      public startWork_resultTupleScheme getScheme() {
        return new startWork_resultTupleScheme();
      }
    }

    private static class startWork_resultTupleScheme extends TupleScheme<startWork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stopWork_args implements org.apache.thrift.TBase<stopWork_args, stopWork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopWork_args");

    private static final org.apache.thrift.protocol.TField WORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("work_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopWork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopWork_argsTupleSchemeFactory());
    }

    public String work_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_ID((short)1, "work_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_ID
            return WORK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_ID, new org.apache.thrift.meta_data.FieldMetaData("work_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopWork_args.class, metaDataMap);
    }

    public stopWork_args() {
    }

    public stopWork_args(
      String work_id)
    {
      this();
      this.work_id = work_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopWork_args(stopWork_args other) {
      if (other.isSetWork_id()) {
        this.work_id = other.work_id;
      }
    }

    public stopWork_args deepCopy() {
      return new stopWork_args(this);
    }

    @Override
    public void clear() {
      this.work_id = null;
    }

    public String getWork_id() {
      return this.work_id;
    }

    public stopWork_args setWork_id(String work_id) {
      this.work_id = work_id;
      return this;
    }

    public void unsetWork_id() {
      this.work_id = null;
    }

    /** Returns true if field work_id is set (has been assigned a value) and false otherwise */
    public boolean isSetWork_id() {
      return this.work_id != null;
    }

    public void setWork_idIsSet(boolean value) {
      if (!value) {
        this.work_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_ID:
        if (value == null) {
          unsetWork_id();
        } else {
          setWork_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_ID:
        return getWork_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_ID:
        return isSetWork_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopWork_args)
        return this.equals((stopWork_args)that);
      return false;
    }

    public boolean equals(stopWork_args that) {
      if (that == null)
        return false;

      boolean this_present_work_id = true && this.isSetWork_id();
      boolean that_present_work_id = true && that.isSetWork_id();
      if (this_present_work_id || that_present_work_id) {
        if (!(this_present_work_id && that_present_work_id))
          return false;
        if (!this.work_id.equals(that.work_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopWork_args typedOther = (stopWork_args)other;

      lastComparison = Boolean.valueOf(isSetWork_id()).compareTo(typedOther.isSetWork_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWork_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_id, typedOther.work_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopWork_args(");
      boolean first = true;

      sb.append("work_id:");
      if (this.work_id == null) {
        sb.append("null");
      } else {
        sb.append(this.work_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopWork_argsStandardSchemeFactory implements SchemeFactory {
      public stopWork_argsStandardScheme getScheme() {
        return new stopWork_argsStandardScheme();
      }
    }

    private static class stopWork_argsStandardScheme extends StandardScheme<stopWork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.work_id = iprot.readString();
                struct.setWork_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopWork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.work_id != null) {
          oprot.writeFieldBegin(WORK_ID_FIELD_DESC);
          oprot.writeString(struct.work_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopWork_argsTupleSchemeFactory implements SchemeFactory {
      public stopWork_argsTupleScheme getScheme() {
        return new stopWork_argsTupleScheme();
      }
    }

    private static class stopWork_argsTupleScheme extends TupleScheme<stopWork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWork_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWork_id()) {
          oprot.writeString(struct.work_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.work_id = iprot.readString();
          struct.setWork_idIsSet(true);
        }
      }
    }

  }

  public static class stopWork_result implements org.apache.thrift.TBase<stopWork_result, stopWork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopWork_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopWork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopWork_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopWork_result.class, metaDataMap);
    }

    public stopWork_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopWork_result(stopWork_result other) {
    }

    public stopWork_result deepCopy() {
      return new stopWork_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopWork_result)
        return this.equals((stopWork_result)that);
      return false;
    }

    public boolean equals(stopWork_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopWork_result typedOther = (stopWork_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopWork_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopWork_resultStandardSchemeFactory implements SchemeFactory {
      public stopWork_resultStandardScheme getScheme() {
        return new stopWork_resultStandardScheme();
      }
    }

    private static class stopWork_resultStandardScheme extends StandardScheme<stopWork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopWork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopWork_resultTupleSchemeFactory implements SchemeFactory {
      public stopWork_resultTupleScheme getScheme() {
        return new stopWork_resultTupleScheme();
      }
    }

    private static class stopWork_resultTupleScheme extends TupleScheme<stopWork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pauseWork_args implements org.apache.thrift.TBase<pauseWork_args, pauseWork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseWork_args");

    private static final org.apache.thrift.protocol.TField WORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("work_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseWork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseWork_argsTupleSchemeFactory());
    }

    public String work_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_ID((short)1, "work_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_ID
            return WORK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_ID, new org.apache.thrift.meta_data.FieldMetaData("work_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseWork_args.class, metaDataMap);
    }

    public pauseWork_args() {
    }

    public pauseWork_args(
      String work_id)
    {
      this();
      this.work_id = work_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseWork_args(pauseWork_args other) {
      if (other.isSetWork_id()) {
        this.work_id = other.work_id;
      }
    }

    public pauseWork_args deepCopy() {
      return new pauseWork_args(this);
    }

    @Override
    public void clear() {
      this.work_id = null;
    }

    public String getWork_id() {
      return this.work_id;
    }

    public pauseWork_args setWork_id(String work_id) {
      this.work_id = work_id;
      return this;
    }

    public void unsetWork_id() {
      this.work_id = null;
    }

    /** Returns true if field work_id is set (has been assigned a value) and false otherwise */
    public boolean isSetWork_id() {
      return this.work_id != null;
    }

    public void setWork_idIsSet(boolean value) {
      if (!value) {
        this.work_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_ID:
        if (value == null) {
          unsetWork_id();
        } else {
          setWork_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_ID:
        return getWork_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_ID:
        return isSetWork_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseWork_args)
        return this.equals((pauseWork_args)that);
      return false;
    }

    public boolean equals(pauseWork_args that) {
      if (that == null)
        return false;

      boolean this_present_work_id = true && this.isSetWork_id();
      boolean that_present_work_id = true && that.isSetWork_id();
      if (this_present_work_id || that_present_work_id) {
        if (!(this_present_work_id && that_present_work_id))
          return false;
        if (!this.work_id.equals(that.work_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pauseWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pauseWork_args typedOther = (pauseWork_args)other;

      lastComparison = Boolean.valueOf(isSetWork_id()).compareTo(typedOther.isSetWork_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWork_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_id, typedOther.work_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseWork_args(");
      boolean first = true;

      sb.append("work_id:");
      if (this.work_id == null) {
        sb.append("null");
      } else {
        sb.append(this.work_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseWork_argsStandardSchemeFactory implements SchemeFactory {
      public pauseWork_argsStandardScheme getScheme() {
        return new pauseWork_argsStandardScheme();
      }
    }

    private static class pauseWork_argsStandardScheme extends StandardScheme<pauseWork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.work_id = iprot.readString();
                struct.setWork_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseWork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.work_id != null) {
          oprot.writeFieldBegin(WORK_ID_FIELD_DESC);
          oprot.writeString(struct.work_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseWork_argsTupleSchemeFactory implements SchemeFactory {
      public pauseWork_argsTupleScheme getScheme() {
        return new pauseWork_argsTupleScheme();
      }
    }

    private static class pauseWork_argsTupleScheme extends TupleScheme<pauseWork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWork_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWork_id()) {
          oprot.writeString(struct.work_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.work_id = iprot.readString();
          struct.setWork_idIsSet(true);
        }
      }
    }

  }

  public static class pauseWork_result implements org.apache.thrift.TBase<pauseWork_result, pauseWork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseWork_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseWork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseWork_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseWork_result.class, metaDataMap);
    }

    public pauseWork_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseWork_result(pauseWork_result other) {
    }

    public pauseWork_result deepCopy() {
      return new pauseWork_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseWork_result)
        return this.equals((pauseWork_result)that);
      return false;
    }

    public boolean equals(pauseWork_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pauseWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pauseWork_result typedOther = (pauseWork_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseWork_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseWork_resultStandardSchemeFactory implements SchemeFactory {
      public pauseWork_resultStandardScheme getScheme() {
        return new pauseWork_resultStandardScheme();
      }
    }

    private static class pauseWork_resultStandardScheme extends StandardScheme<pauseWork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseWork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseWork_resultTupleSchemeFactory implements SchemeFactory {
      public pauseWork_resultTupleScheme getScheme() {
        return new pauseWork_resultTupleScheme();
      }
    }

    private static class pauseWork_resultTupleScheme extends TupleScheme<pauseWork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class resumeWork_args implements org.apache.thrift.TBase<resumeWork_args, resumeWork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeWork_args");

    private static final org.apache.thrift.protocol.TField WORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("work_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeWork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeWork_argsTupleSchemeFactory());
    }

    public String work_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORK_ID((short)1, "work_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORK_ID
            return WORK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORK_ID, new org.apache.thrift.meta_data.FieldMetaData("work_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeWork_args.class, metaDataMap);
    }

    public resumeWork_args() {
    }

    public resumeWork_args(
      String work_id)
    {
      this();
      this.work_id = work_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeWork_args(resumeWork_args other) {
      if (other.isSetWork_id()) {
        this.work_id = other.work_id;
      }
    }

    public resumeWork_args deepCopy() {
      return new resumeWork_args(this);
    }

    @Override
    public void clear() {
      this.work_id = null;
    }

    public String getWork_id() {
      return this.work_id;
    }

    public resumeWork_args setWork_id(String work_id) {
      this.work_id = work_id;
      return this;
    }

    public void unsetWork_id() {
      this.work_id = null;
    }

    /** Returns true if field work_id is set (has been assigned a value) and false otherwise */
    public boolean isSetWork_id() {
      return this.work_id != null;
    }

    public void setWork_idIsSet(boolean value) {
      if (!value) {
        this.work_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORK_ID:
        if (value == null) {
          unsetWork_id();
        } else {
          setWork_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORK_ID:
        return getWork_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORK_ID:
        return isSetWork_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeWork_args)
        return this.equals((resumeWork_args)that);
      return false;
    }

    public boolean equals(resumeWork_args that) {
      if (that == null)
        return false;

      boolean this_present_work_id = true && this.isSetWork_id();
      boolean that_present_work_id = true && that.isSetWork_id();
      if (this_present_work_id || that_present_work_id) {
        if (!(this_present_work_id && that_present_work_id))
          return false;
        if (!this.work_id.equals(that.work_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resumeWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resumeWork_args typedOther = (resumeWork_args)other;

      lastComparison = Boolean.valueOf(isSetWork_id()).compareTo(typedOther.isSetWork_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWork_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_id, typedOther.work_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeWork_args(");
      boolean first = true;

      sb.append("work_id:");
      if (this.work_id == null) {
        sb.append("null");
      } else {
        sb.append(this.work_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeWork_argsStandardSchemeFactory implements SchemeFactory {
      public resumeWork_argsStandardScheme getScheme() {
        return new resumeWork_argsStandardScheme();
      }
    }

    private static class resumeWork_argsStandardScheme extends StandardScheme<resumeWork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.work_id = iprot.readString();
                struct.setWork_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeWork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.work_id != null) {
          oprot.writeFieldBegin(WORK_ID_FIELD_DESC);
          oprot.writeString(struct.work_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeWork_argsTupleSchemeFactory implements SchemeFactory {
      public resumeWork_argsTupleScheme getScheme() {
        return new resumeWork_argsTupleScheme();
      }
    }

    private static class resumeWork_argsTupleScheme extends TupleScheme<resumeWork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWork_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWork_id()) {
          oprot.writeString(struct.work_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeWork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.work_id = iprot.readString();
          struct.setWork_idIsSet(true);
        }
      }
    }

  }

  public static class resumeWork_result implements org.apache.thrift.TBase<resumeWork_result, resumeWork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeWork_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeWork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeWork_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeWork_result.class, metaDataMap);
    }

    public resumeWork_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeWork_result(resumeWork_result other) {
    }

    public resumeWork_result deepCopy() {
      return new resumeWork_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeWork_result)
        return this.equals((resumeWork_result)that);
      return false;
    }

    public boolean equals(resumeWork_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resumeWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resumeWork_result typedOther = (resumeWork_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeWork_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeWork_resultStandardSchemeFactory implements SchemeFactory {
      public resumeWork_resultStandardScheme getScheme() {
        return new resumeWork_resultStandardScheme();
      }
    }

    private static class resumeWork_resultStandardScheme extends StandardScheme<resumeWork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeWork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeWork_resultTupleSchemeFactory implements SchemeFactory {
      public resumeWork_resultTupleScheme getScheme() {
        return new resumeWork_resultTupleScheme();
      }
    }

    private static class resumeWork_resultTupleScheme extends TupleScheme<resumeWork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeWork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
