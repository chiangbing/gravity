/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hanborq.gravity.metrics.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TMetricsRecord implements org.apache.thrift.TBase<TMetricsRecord, TMetricsRecord._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMetricsRecord");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LONG_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("longMetrics", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField DOUBLE_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleMetrics", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField BINARY_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryMetrics", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMetricsRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMetricsRecordTupleSchemeFactory());
  }

  public long timestamp; // required
  public Map<String,Long> longMetrics; // optional
  public Map<String,Double> doubleMetrics; // optional
  public Map<String,ByteBuffer> binaryMetrics; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    LONG_METRICS((short)11, "longMetrics"),
    DOUBLE_METRICS((short)12, "doubleMetrics"),
    BINARY_METRICS((short)13, "binaryMetrics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 11: // LONG_METRICS
          return LONG_METRICS;
        case 12: // DOUBLE_METRICS
          return DOUBLE_METRICS;
        case 13: // BINARY_METRICS
          return BINARY_METRICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LONG_METRICS,_Fields.DOUBLE_METRICS,_Fields.BINARY_METRICS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_METRICS, new org.apache.thrift.meta_data.FieldMetaData("longMetrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_METRICS, new org.apache.thrift.meta_data.FieldMetaData("doubleMetrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BINARY_METRICS, new org.apache.thrift.meta_data.FieldMetaData("binaryMetrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMetricsRecord.class, metaDataMap);
  }

  public TMetricsRecord() {
  }

  public TMetricsRecord(
    long timestamp)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMetricsRecord(TMetricsRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetLongMetrics()) {
      Map<String,Long> __this__longMetrics = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.longMetrics.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__longMetrics_copy_key = other_element_key;

        Long __this__longMetrics_copy_value = other_element_value;

        __this__longMetrics.put(__this__longMetrics_copy_key, __this__longMetrics_copy_value);
      }
      this.longMetrics = __this__longMetrics;
    }
    if (other.isSetDoubleMetrics()) {
      Map<String,Double> __this__doubleMetrics = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.doubleMetrics.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__doubleMetrics_copy_key = other_element_key;

        Double __this__doubleMetrics_copy_value = other_element_value;

        __this__doubleMetrics.put(__this__doubleMetrics_copy_key, __this__doubleMetrics_copy_value);
      }
      this.doubleMetrics = __this__doubleMetrics;
    }
    if (other.isSetBinaryMetrics()) {
      Map<String,ByteBuffer> __this__binaryMetrics = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.binaryMetrics.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__binaryMetrics_copy_key = other_element_key;

        ByteBuffer __this__binaryMetrics_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__binaryMetrics.put(__this__binaryMetrics_copy_key, __this__binaryMetrics_copy_value);
      }
      this.binaryMetrics = __this__binaryMetrics;
    }
  }

  public TMetricsRecord deepCopy() {
    return new TMetricsRecord(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.longMetrics = null;
    this.doubleMetrics = null;
    this.binaryMetrics = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TMetricsRecord setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getLongMetricsSize() {
    return (this.longMetrics == null) ? 0 : this.longMetrics.size();
  }

  public void putToLongMetrics(String key, long val) {
    if (this.longMetrics == null) {
      this.longMetrics = new HashMap<String,Long>();
    }
    this.longMetrics.put(key, val);
  }

  public Map<String,Long> getLongMetrics() {
    return this.longMetrics;
  }

  public TMetricsRecord setLongMetrics(Map<String,Long> longMetrics) {
    this.longMetrics = longMetrics;
    return this;
  }

  public void unsetLongMetrics() {
    this.longMetrics = null;
  }

  /** Returns true if field longMetrics is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMetrics() {
    return this.longMetrics != null;
  }

  public void setLongMetricsIsSet(boolean value) {
    if (!value) {
      this.longMetrics = null;
    }
  }

  public int getDoubleMetricsSize() {
    return (this.doubleMetrics == null) ? 0 : this.doubleMetrics.size();
  }

  public void putToDoubleMetrics(String key, double val) {
    if (this.doubleMetrics == null) {
      this.doubleMetrics = new HashMap<String,Double>();
    }
    this.doubleMetrics.put(key, val);
  }

  public Map<String,Double> getDoubleMetrics() {
    return this.doubleMetrics;
  }

  public TMetricsRecord setDoubleMetrics(Map<String,Double> doubleMetrics) {
    this.doubleMetrics = doubleMetrics;
    return this;
  }

  public void unsetDoubleMetrics() {
    this.doubleMetrics = null;
  }

  /** Returns true if field doubleMetrics is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleMetrics() {
    return this.doubleMetrics != null;
  }

  public void setDoubleMetricsIsSet(boolean value) {
    if (!value) {
      this.doubleMetrics = null;
    }
  }

  public int getBinaryMetricsSize() {
    return (this.binaryMetrics == null) ? 0 : this.binaryMetrics.size();
  }

  public void putToBinaryMetrics(String key, ByteBuffer val) {
    if (this.binaryMetrics == null) {
      this.binaryMetrics = new HashMap<String,ByteBuffer>();
    }
    this.binaryMetrics.put(key, val);
  }

  public Map<String,ByteBuffer> getBinaryMetrics() {
    return this.binaryMetrics;
  }

  public TMetricsRecord setBinaryMetrics(Map<String,ByteBuffer> binaryMetrics) {
    this.binaryMetrics = binaryMetrics;
    return this;
  }

  public void unsetBinaryMetrics() {
    this.binaryMetrics = null;
  }

  /** Returns true if field binaryMetrics is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryMetrics() {
    return this.binaryMetrics != null;
  }

  public void setBinaryMetricsIsSet(boolean value) {
    if (!value) {
      this.binaryMetrics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case LONG_METRICS:
      if (value == null) {
        unsetLongMetrics();
      } else {
        setLongMetrics((Map<String,Long>)value);
      }
      break;

    case DOUBLE_METRICS:
      if (value == null) {
        unsetDoubleMetrics();
      } else {
        setDoubleMetrics((Map<String,Double>)value);
      }
      break;

    case BINARY_METRICS:
      if (value == null) {
        unsetBinaryMetrics();
      } else {
        setBinaryMetrics((Map<String,ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case LONG_METRICS:
      return getLongMetrics();

    case DOUBLE_METRICS:
      return getDoubleMetrics();

    case BINARY_METRICS:
      return getBinaryMetrics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case LONG_METRICS:
      return isSetLongMetrics();
    case DOUBLE_METRICS:
      return isSetDoubleMetrics();
    case BINARY_METRICS:
      return isSetBinaryMetrics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMetricsRecord)
      return this.equals((TMetricsRecord)that);
    return false;
  }

  public boolean equals(TMetricsRecord that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_longMetrics = true && this.isSetLongMetrics();
    boolean that_present_longMetrics = true && that.isSetLongMetrics();
    if (this_present_longMetrics || that_present_longMetrics) {
      if (!(this_present_longMetrics && that_present_longMetrics))
        return false;
      if (!this.longMetrics.equals(that.longMetrics))
        return false;
    }

    boolean this_present_doubleMetrics = true && this.isSetDoubleMetrics();
    boolean that_present_doubleMetrics = true && that.isSetDoubleMetrics();
    if (this_present_doubleMetrics || that_present_doubleMetrics) {
      if (!(this_present_doubleMetrics && that_present_doubleMetrics))
        return false;
      if (!this.doubleMetrics.equals(that.doubleMetrics))
        return false;
    }

    boolean this_present_binaryMetrics = true && this.isSetBinaryMetrics();
    boolean that_present_binaryMetrics = true && that.isSetBinaryMetrics();
    if (this_present_binaryMetrics || that_present_binaryMetrics) {
      if (!(this_present_binaryMetrics && that_present_binaryMetrics))
        return false;
      if (!this.binaryMetrics.equals(that.binaryMetrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TMetricsRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TMetricsRecord typedOther = (TMetricsRecord)other;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMetrics()).compareTo(typedOther.isSetLongMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMetrics, typedOther.longMetrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleMetrics()).compareTo(typedOther.isSetDoubleMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleMetrics, typedOther.doubleMetrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryMetrics()).compareTo(typedOther.isSetBinaryMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryMetrics, typedOther.binaryMetrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMetricsRecord(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetLongMetrics()) {
      if (!first) sb.append(", ");
      sb.append("longMetrics:");
      if (this.longMetrics == null) {
        sb.append("null");
      } else {
        sb.append(this.longMetrics);
      }
      first = false;
    }
    if (isSetDoubleMetrics()) {
      if (!first) sb.append(", ");
      sb.append("doubleMetrics:");
      if (this.doubleMetrics == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleMetrics);
      }
      first = false;
    }
    if (isSetBinaryMetrics()) {
      if (!first) sb.append(", ");
      sb.append("binaryMetrics:");
      if (this.binaryMetrics == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryMetrics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMetricsRecordStandardSchemeFactory implements SchemeFactory {
    public TMetricsRecordStandardScheme getScheme() {
      return new TMetricsRecordStandardScheme();
    }
  }

  private static class TMetricsRecordStandardScheme extends StandardScheme<TMetricsRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMetricsRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LONG_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.longMetrics = new HashMap<String,Long>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  long _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readI64();
                  struct.longMetrics.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setLongMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DOUBLE_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.doubleMetrics = new HashMap<String,Double>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6; // required
                  double _val7; // required
                  _key6 = iprot.readString();
                  _val7 = iprot.readDouble();
                  struct.doubleMetrics.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setDoubleMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BINARY_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.binaryMetrics = new HashMap<String,ByteBuffer>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // required
                  ByteBuffer _val11; // required
                  _key10 = iprot.readString();
                  _val11 = iprot.readBinary();
                  struct.binaryMetrics.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setBinaryMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMetricsRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.longMetrics != null) {
        if (struct.isSetLongMetrics()) {
          oprot.writeFieldBegin(LONG_METRICS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.longMetrics.size()));
            for (Map.Entry<String, Long> _iter12 : struct.longMetrics.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeI64(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleMetrics != null) {
        if (struct.isSetDoubleMetrics()) {
          oprot.writeFieldBegin(DOUBLE_METRICS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.doubleMetrics.size()));
            for (Map.Entry<String, Double> _iter13 : struct.doubleMetrics.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeDouble(_iter13.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryMetrics != null) {
        if (struct.isSetBinaryMetrics()) {
          oprot.writeFieldBegin(BINARY_METRICS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.binaryMetrics.size()));
            for (Map.Entry<String, ByteBuffer> _iter14 : struct.binaryMetrics.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeBinary(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMetricsRecordTupleSchemeFactory implements SchemeFactory {
    public TMetricsRecordTupleScheme getScheme() {
      return new TMetricsRecordTupleScheme();
    }
  }

  private static class TMetricsRecordTupleScheme extends TupleScheme<TMetricsRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMetricsRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.timestamp);
      BitSet optionals = new BitSet();
      if (struct.isSetLongMetrics()) {
        optionals.set(0);
      }
      if (struct.isSetDoubleMetrics()) {
        optionals.set(1);
      }
      if (struct.isSetBinaryMetrics()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLongMetrics()) {
        {
          oprot.writeI32(struct.longMetrics.size());
          for (Map.Entry<String, Long> _iter15 : struct.longMetrics.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeI64(_iter15.getValue());
          }
        }
      }
      if (struct.isSetDoubleMetrics()) {
        {
          oprot.writeI32(struct.doubleMetrics.size());
          for (Map.Entry<String, Double> _iter16 : struct.doubleMetrics.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeDouble(_iter16.getValue());
          }
        }
      }
      if (struct.isSetBinaryMetrics()) {
        {
          oprot.writeI32(struct.binaryMetrics.size());
          for (Map.Entry<String, ByteBuffer> _iter17 : struct.binaryMetrics.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeBinary(_iter17.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMetricsRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longMetrics = new HashMap<String,Long>(2*_map18.size);
          for (int _i19 = 0; _i19 < _map18.size; ++_i19)
          {
            String _key20; // required
            long _val21; // required
            _key20 = iprot.readString();
            _val21 = iprot.readI64();
            struct.longMetrics.put(_key20, _val21);
          }
        }
        struct.setLongMetricsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleMetrics = new HashMap<String,Double>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            String _key24; // required
            double _val25; // required
            _key24 = iprot.readString();
            _val25 = iprot.readDouble();
            struct.doubleMetrics.put(_key24, _val25);
          }
        }
        struct.setDoubleMetricsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryMetrics = new HashMap<String,ByteBuffer>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28; // required
            ByteBuffer _val29; // required
            _key28 = iprot.readString();
            _val29 = iprot.readBinary();
            struct.binaryMetrics.put(_key28, _val29);
          }
        }
        struct.setBinaryMetricsIsSet(true);
      }
    }
  }

}

